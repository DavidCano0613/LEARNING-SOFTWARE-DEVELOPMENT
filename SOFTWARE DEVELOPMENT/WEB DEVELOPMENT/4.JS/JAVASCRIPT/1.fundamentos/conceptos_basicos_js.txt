TC39
ECMASCRIPT 
JAVASCRIPT

JAVASCRIPT TIENE TIPOS JS ES DINAMICAMENTE TIPADO

AHEAD OF TIME: Primero se compila y luego se ejecuta, se dice que tipos de datos van a ver cuanto espacio van a tener, es decir se le da al compilador informaci√≥n de que va hacer
JUST IN TIME: Compila y ejecuta a la vez. 


SISTEMAS DE TIPOS DE DATOS:
Son las reglas que impone un lenguaje de programaci√≥n para clasificar qu√© tipos de valores existen, c√≥mo se pueden manipularlos y cu√°les son las operaciones v√°lidas para realizar con ellos y cuales  no. 


1.Chequeo de tipos: 
Es el proceso de verficiar y hacer cumplir las restricciones de tipos que existen en un lenguaje, basciamente consiste en verificar que si una variable o un metodo se definen con un tipo de dato este no se pueda cabiar

-Chequeo est√°tico de tipos: Se hace antes de ejecutar el programa, tienen la ventaja de que funcionan como una especie de escudo antes de que el c√≥digo se ejecute, atrapa bugs antes de ejecutar el programa. El c√≥digo se compila antes de ser ejecutado

-Chequeo dinamico de tipos: Se hace durante la ejecuci√≥n del programa. Las variables pueden contener valores de diferentes tipos m√°s adelante en la ejecuci√≥n del ese c√≥digo. El motor de JS va ejecutando cada linea de c√≥digo en tiempo real o sobre la marcha, si se encuentra un error de tipos se detiene la ejecuci√≥n del programa. 

La diferencia de estos dos tipos de chequeo raidca en si esta se hace antes de que se ejecute el programa o durante la ejecuci√≥n del mismo. 


2.Exigencia de tipos: 
Qu√© tan exigente es un lenguaje para considerar que estamos cometiendo un error de tipos. Esto tiene un rango de exigencia, por ejemplo python es mas exigente que php pero no tanto como java o c# por ejemplo. Funciona como en volumen su exigencia puede ser mas fuerte o mas debil. 

Conversi√≥n de tipos: 
Javascript en ciertas ocasiones va convertir por nosotros ciertos datos cuando los estamos operando. 

Coerci√≥n de tipos: 
Es la conversi√≥n impl√≠cita de tipos que realiza el motor de JS para poder concretar una operaci√≥n. 

Conversi√≥n explicita de tipos: Cuando nosotros mismos los convertimos con funciones como String() Number() Boolean()

IEE 754 
Fromato para representar numeros en js cada numero cupada 64 bits en la memoria llllllllllkol 

Equivalencia y compatibilidad de tipos: C√≥mo un lenguaje determina que tipo es compatible con otro tipo o equivalente a otro tipo. 
 
Tipado nominal
Tipado estructural

let user  = { name: "david"}
!!user

' '.lenght 
toString 
 + " " 

0 === -0 

0.1 + 0.3 
+(0.1 + 0.3).toFixed(2)

Number.isSafeInteger
Number.MAX_VALUE
Number.MIN_VALUE
Infinity 
-Inifinity 
isFinite()

!!

SYMBOL 
Se usa para crear valores unicos, irrepetibles como las huellas digitales por ejemplo, para crearlo se debe llamar a la funci√≥n symbol

En los datos primitivos podemos acceder a valores y metodos al igual que en lo sobjetos debido a que el motot de js crea uno de estos objetos temporalmente para poder acceder a propiedades a metodos, este objeto se  llama  wrapper es un objeto que envuelve a un valor primitivo cuando queremos acceder a una prpiedad o llamar a un metodo del mismo. 


SCOPE 
Definici√≥n
Cuando hacemos referencia a una variable js va buscar esta en el enterno mas cerca he irda buscando en entornos mas lejanos si no la encuentra. El Scope es lo que le da significado a las variables y ademas determina el conjunto de variables que podemos acceder desde una linea de c√≥digo. Declarar con var let y const tiene diferentes implicaciones en el scope.  

TIPOS DE SCOPE

SCOPE VS CONTEXTO
Contexto y contexto de ejecuci√≥n: El contexto en js tiene que ver con el valor que tiene la variable this en alg√∫n momento de la ejecuci√≥n. Cu√°l es el objto que est√° ejecutando una funci√≥n y eso es lo que es el scope es el contexto de ejecuci√≥n. 


SCOPE GLOBAL
Las variables globales puede ser accedidas desde cualquier lugar de nuestro programa, por ende, son variables declaradas fuera de toda funci√≥n o bloque de c√≥digo. Sin importar si las declaramos con var con let o con const 

SCOPE LOCAL
Las variables locales s√≥lo se pueden acceder desde una parte de nuestro programa.

-SCOPE DE FUNCI√ìN: 
Los parametros y las variables que se declaren dentro de una funcion solo pueden ser referenciados es decir solo se les puede manipular dentro de esta funci√≥n y no por fuera de esta. Pero se pueden acceder a estas incluso si estan dentro de un bloque if o for, con que este en el cuerpo de la funcion es accecible. Las variables declaradas con var siempre van a tener un scope de funci√≥n

-SCOPE DE BLOQUE: 
Un bloque de c√≥digo es toda porci√≥n de c√≥digo que esta encerrada entre llaves {} ya sea de un if un el un while o un for. Cuando se declara con let las variables no pueden ser accedidas por fuera de ese bloque. Aqu√≠ se aplican las que se declaran con let y const.

Como buena practica de programaci√≥n se deben declarar las variables con el scope m√°s reducido posible. Adem√°s las variables globales van a estar la memoria todo el tiempo, las variables locales no, solo durante la ejecuci√≥n de la funci√≥n o al bloque de c√≥digo al que pertenece. 


 
Scope en JS
Cadenas de Scopes
Herramientas del navegador para scope


Paradigma funcional
Mutaciones
Es no modificar un valor, el valor original de una variable o un arreglo de mantiene como estaba, y apartir de una refencia en memroia se crea otra variable o array. 

mutable
const numero = 3
numero *=2 

inmutable
const numero=3
const numero2 = numero * 2 

con guion bajo saltas parametros


JAVASCRIPT ENGINE - V8
Hay muchos motores de Js que se encergan de convertir el 

Global envirioment: Entorno de ejecuci√≥n en el navegador

Global object: Es un objeto global que genera el navegador tambi√©n conocido 
como widnow


Outer envirioment:

Contexto de ejecuci√≥n
Lo corre en un stack de tareas y las va apilando a medida que van llegando

Window: Es un objeto que es como la ventana del navegador y el navegador viene 
con unas APIS integradas que permiten extender las funcionalidad de JS, window
es un entorno global que esta listo en el navegador para manipular c√≥digo JS

Parser: Es cuando el motor de js empieza a buscar o parsear las keywords o palabras reservadas del lenguaje
Profiler: Monitor
Compiler: Lo compila y lo manda la computadora como Bytecode

Memory Heap: Es el lugar donde se guardan los valores de las variables y las funciones en JS, cuando se ejecuta el c√≥digo todas las variables y funciones van al memory head donde luego el callstack va apilarlas o mas bien donde las llama. Es como una estanteria donde se van guardando, esto no se guarda de forma lineal, JS lo hace en la forma que quiere. 


CallStack: La pila de tareas es donde se apilan las tareas de la primera hasta la ultima, la primera que se mete es la del objeto global, luego se van apilando las tareas, la ultima tarea es la que sale FILO "first in last out"

Garbage Collection: Limpia la memoria de los datos no utilizados para no sobrecargarla y seguir trabajando sin problemas.
Mark and Sweep, cuando js mira el callstack para saber que no necesitamos o ya no llamamo m√°s, lo marca (mark) y luego lo elimina (sweep) 

Stack Overflow: Es cuando se sobrecarga el callstack por ende la ejecuci√≥n del c√≥digo se frena, esto pasa por ejemplo cuando se ejecuta un loop infinito. Basicamente esto se traduce como Desbordamiento de la pila de tareas. 

Asincronia: JS por defecto corre una tarea a la vez lo cual es sicronia. 
La asincronia es el proceso en cual JavaScript permite ejecutar tareas de forma asincrona sin para el flujo de ejecuci√≥n. Esto es gracias a la Api del navegador Timeout. Esta API lo que hace es que el navegador ejecute de forma paralela lo que esta haciendo de forma asincrona para que se siga ejecutando lo que esta en el callstack, cuando el API navegador termina de trabajar se manda esa tarea al callback queue, es como una fila donde se guardan esas tareas que hace el timeout, el que s encarga de mandar las tareas que estan en el callback queue al navegador es el EVENT LOOP es un bucle de eventos que esta preguntando al callstack si no tiene nada que hacer para mandarle las tareas que estan apiladas en el callbackqueue.

Taquer√≠a DeGranda presenta a:
.
üåÆ - call stack : el taquero (√≥rdenes r√°pidas)
üë®‚Äçüç≥ - web APIs : la cocina
üåØ - callback queue : las √≥rdenes preparadas
üíÅ‚Äç‚ôÇÔ∏è - event loop : el mesero



This es una variable que es de referencia window 

Hoisting: Es el proceso que hacen los motores de JavaScript de mandar a ejecutar 
o leer en primer lugar las funciones declardas y las variables declaradas con var. 



RECURSOS:
https://developer.mozilla.org/en-US/docs/Glossary/Parse
https://astexplorer.net/


