TIPOS DE DATOS EN SQL 
-Tipos de dato numéricos
Listado de cada uno de los tipos de dato numéricos en MySQL, su ocupación en disco y valores.

INT (INTEGER): Ocupación de 4 bytes con valores entre -2147483648 y 2147483647 o entre 0 y 4294967295.
SMALLINT: Ocupación de 2 bytes con valores entre -32768 y 32767 o entre 0 y 65535.
TINYINT: Ocupación de 1 bytes con valores entre -128 y 127 o entre 0 y 255.
MEDIUMINT: Ocupación de 3 bytes con valores entre -8388608 y 8388607 o entre 0 y 16777215.
BIGINT: Ocupación de 8 bytes con valores entre -8388608 y 8388607 o entre 0 y 16777215.
DECIMAL (NUMERIC): Almacena los números de coma flotante como cadenas o string.
FLOAT (m,d): Almacena números de coma flotante, donde ‘m’ es el número de dígitos de la parte entera y ‘d’ el número de decimales.
DOUBLE (REAL): Almacena número de coma flotante con precisión doble. Igual que FLOAT, la diferencia es el rango de valores posibles.
BIT (BOOL, BOOLEAN): Número entero con valor 0 o 1.
Tipos de dato con formato fecha
Listado de cada uno de los tipos de dato con formato fecha en MySQL, su ocupación en disco y valores.

DATE: Válido para almacenar una fecha con año, mes y día, su rango oscila entre ‘1000-01-01′ y ‘9999-12-31′.
DATETIME: Almacena una fecha (año-mes-día) y una hora (horas-minutos-segundos), su rango oscila entre ‘1000-01-01 00:00:00′ y ‘9999-12-31 23:59:59′.
TIME: Válido para almacenar una hora (horas-minutos-segundos). Su rango de horas oscila entre -838-59-59 y 838-59-59. El formato almacenado es ‘HH:MM:SS’.
TIMESTAMP: Almacena una fecha y hora UTC. El rango de valores oscila entre ‘1970-01-01 00:00:01′ y ‘2038-01-19 03:14:07′.
YEAR: Almacena un año dado con 2 o 4 dígitos de longitud, por defecto son 4. El rango de valores oscila entre 1901 y 2155 con 4 dígitos. Mientras que con 2 dígitos el rango es desde 1970 a 2069 (70-69).
Diferentes tipos de dato con formato string
Listado de cada uno de los tipos de dato con formato string en MySQL, su ocupación en disco y valores.

CHAR: Ocupación fija cuya longitud comprende de 1 a 255 caracteres.
VARCHAR: Ocupación variable cuya longitud comprende de 1 a 255 caracteres.
TINYBLOB: Una longitud máxima de 255 caracteres. Válido para objetos binarios como son un fichero de texto, imágenes, ficheros de audio o vídeo. No distingue entre minúculas y mayúsculas.
BLOB: Una longitud máxima de 65.535 caracteres. Válido para objetos binarios como son un fichero de texto, imágenes, ficheros de audio o vídeo. No distingue entre minúculas y mayúsculas.
MEDIUMBLOB: Una longitud máxima de 16.777.215 caracteres. Válido para objetos binarios como son un fichero de texto, imágenes, ficheros de audio o vídeo. No distingue entre minúculas y mayúsculas.
LONGBLOB: Una longitud máxima de 4.294.967.298 caracteres. Válido para objetos binarios como son un fichero de texto, imágenes, ficheros de audio o vídeo. No distingue entre minúculas y mayúsculas.
SET: Almacena 0, uno o varios valores una lista con un máximo de 64 posibles valores.
ENUM: Igual que SET pero solo puede almacenar un valor.
TINYTEXT: Una longitud máxima de 255 caracteres. Sirve para almecenar texto plano sin formato. Distingue entre minúculas y mayúsculas.
TEXT:Una longitud máxima de 65.535 caracteres. Sirve para almecenar texto plano sin formato. Distingue entre minúculas y mayúsculas.
MEDIUMTEXT:Una longitud máxima de 16.777.215 caracteres. Sirve para almecenar texto plano sin formato. Distingue entre minúculas y mayúsculas.
LONGTEXT: Una longitud máxima de 4.294.967.298 caracteres. Sirve para almecenar texto plano sin formato. Distingue entre minúculas y mayúsculas.

NOTAS: -Aqui se explico algo muy importante sobre el ahorro de memoria a la hora de poner el diagrama de la base de datos en el mundo real (En el motor de base de datos ya sea SQLSERVER o Oracle). El Char sirve para declarar un campo rigido de disco que vamos a ocupar y el varchar puede cambiar la longitud dependiento del largo de los datos que metamos en el. Seguramente esten pensando que lo mejor es un varchar para todo ya que es dinamico. Pero que el motor de base de datos haga los procesos de calcular la nueva longitud de cada dato del tipo varchar que ingresemos nos puede dar problemas de rendimiento. Si estamos seguros que un dato solo ocupara un char de 5 ocupemos un char de 5. Estas son algunas de las buenas practicas que se debe tener para el funcionamiento de un motor de base de datos.

-Diferencia entre NUMERIC y DECIMAL:
-NUMERIC debe ser exactamente tan preciso como está definido, de modo que si define 4 posiciones decimales, la database siempre debe almacenar 4 decimales.
-DECIMAL debe ser al less tan preciso como se define. Esto significa que la database puede almacenar más dígitos que los especificados (debido a que el espacio de almacenamiento detrás de escena tiene espacio para dígitos adicionales). Esto significa que la database podría almacenar 1.00005 lugar de 1.0000 , lo que afectaría los cálculos futuros.



DISEÑO DE BASES DE DATOS RELACIONALES
Todos debemos aprender a diseñar, ya que si combinamos algunas definiciones, debemos crear objetos útiles para producirlos en serie. No te preocupes si no te va bien combinar colores u organizar formas, por ahora basta con poder plasmar las ideas en objetos no palpables.

No te apresures a escribir código nunca. Lo habrás leído o escuchado en muchos lados. Pues bien, ese debe ser uno de los n mandamientos del desarrollo de software que debes cumplir. Y ¿por qué?, bueno la respuesta es simple, si no diseñas primero la solución, te encontrarás con miles de problemas en el camino en los que gastarás más tiempo del que hubieras gastado realizando un buen diseño.

¿Cómo empezar?
Lo primero que debes tener muy bien documentados son tus requerimientos. Debes saber muy bien cuál es la necesidad que vas a resolver/solucionar. Con los requerimientos podrás ir diseñando cada uno de los componentes de tu aplicación. Generalmente, los requerimientos bien documentados son todo lo que necesitas para comenzar a diseñar tus bases de datos. Sin embargo, yo sugiero tener un prototipo que nos permita entender mejor el flujo de trabajo de la aplicación, ya que con este prototipo podrás entender procesos que pueden ser difíciles de plasmar o de imaginar. Además, los prototipos te pueden dar más información de lo que los requerimientos te ofrecen.

Muy bien, ya tienes tus requerimientos y en casos ideales, ya tienes tus prototipos. Así que a diseñar! Las fases de diseño de una base de datos relacional son:

Diseño Conceptual
Durante esta fase, plasmaremos nuestras entidades y las relaciones que existirán entre ellas. Yo por lo general lo hago a mano, me parece mucho más sencillo. Cada entidad la identificaremos con un rectángulo y dentro de este colocaremos su nombre. A cada entidad le colocaremos sus respectivos atributos y resaltaremos el atributo principal, aquél atributo que identificará cada registro de manera única. Y por último crearemos las relaciones que existen entre dichas entidades. Siendo muy sinceros, esta fase no la hacemos a conciencia (me incluyo), pero lo pueden combinar con la siguiente fase muy fácilmente. Aquí no te preocupas por el motor de bases de datos aún.

Diseño Lógico
Aquí podemos tabular nuestro diseño conceptual. Este proceso es más utilizado que el anterior (no debería ser así), ya que cuando ya llevas bastante trabajando en bases de datos, el proceso tabular es más rápido de realizar y vemos resultados más rápidamente. En esta fase, debemos pensar en cómo normalizar nuestras tablas para evitar duplicidad de información y para ahorrar espacio de almacenamiento. Esto último (ahorrar espacio) ya no es tan importante como hace algunos años, incluso hoy en día hablamos de inteligencia de negocios, minería de datos, entre otros términos que nos exigen eliminar la normalización, pero de eso hablaremos en otros post. Para este proceso, las herramientas de modelado te ayudan bastante a ver las relaciones de las tablas. En teoría, aquí tampoco te preocupas por el motor, ya que el modelo tabular es igual en todos los motores de bases de datos relacionales.

Diseño físico
En esta última fase ya debemos revisar a detalle los tipos de datos que utilizaremos, sus dominios (qué valores va a permitir), cuales índices debemos crear para optimizar las consultas, entre otros. Aquí ya escribimos nuestro SQL para plasmar todo nuestro diseño en el motor de bases de datos elegido.


Errores de diseño en bases de datos : https://www.youtube.com/watch?v=hwaZ1f81g3k
1. Guardar multiples valores en la misma columna. Al hacer eso se pierde la capacidad consulta y presenta problemas de normalización
2. No crear las tablas lookup: Tablas pequeña para valores que no suelen cambiar mucho en el tiempo. 
3. Nombres inconsistentes: Es un error a nivel de desarrollo, suele ser confunso. Se deberían usar nombres muy claros y bien organizados. 
Es decir, que una alla un cambo o tabla que tenga prefijos, otro con todo mayuscula, otro con todo minuscula y así. 
4. Guardar información calculable: Se puede calcular a nivel de la aplicación, Se puede usar objetos a nivel de la base de datos usando vistas o Triggers 
5. No crear llaves foráneas: Se pierde el poder de las bases de datos relacionales.
6. Falta de índices: Para acceder a los datos mas rapido
7. Falta de llaves únicas: Ayuda a la integridad de los datos. 

Conclusiones
Ya hemos visto los requisitos para diseñar nuestras bases de datos relacionales y las fases por las que debemos pasar para tener nuestra data bien organizada. Parecen muchos pasos, pero en realidad son muy sencillos de seguir y te ahorrarán muchos dolores de cabeza. Así que para la fase 1: saca una hoja de papel y un lápiz, para la fase 2 puedes usar una hoja de cálculo para tabular las entidades, aunque es mejor utilizar una herramienta especializada en el diseño tabular y para la fase 3 diviértete y saca tu maestro jedi interno escribiendo tu SQL.



NORMALIZACIÓN
-Proceso de normalización El proceso de normalización es un estándar que consiste, básicamente, en un proceso de conversión de las relaciones entre las entidades, evitando:

La redundancia de los datos: repetición de datos en un sistema.
Anomalías de actualización: Inconsistencias de los datos como resultado de datos redundantes y actualizaciones parciales.
Anomalías de borrado: Pérdidas no intencionadas de datos debido a que se han borrado otros datos.
Anomalías de inserción: Imposibilidad de adicionar datos en la base de datos debido a la ausencia de otros datos.


1FN Primera forma normal: Atributos atómicos (Sin campos repetidos). Esto quiere decir que ningún campo puede tener el mismo tipo de valor como varios campos materia (materia1, materia2,…).

2FN Segunda forma normal: Cumplir con 1FN y Cada campo de la tabla debe depender de una clave única. Es decir en las tablas no se puede repetir los campos primarios ya que los mismos son únicos por tanto si existe una relación uno a muchos se debe crear una tabla aparte donde cohabitaran la llave primaria de la primera tabla y la llave primaria de la segunda tabla de esta forma logramos relacionar de manera efectiva dos tablas respetando las llaves primarias.

3FN Tercera forma normal: Cumple 1FN y 2FN y los campos que NO son clave NO deben tener dependencias. Esto nos indica que todos los campos de la tabla deben estar estrechamente relacionados con el campo primario y no serlo de manera transitiva, por ejemplo, en una tabla torneos tenemos el código del torneo el nombre el ganador y la fecha de nacimiento del ganador, como observamos no podemos tener la fecha de nacimiento del ganador en dicha tabla ya que no está relacionada para nada con el torneo y además existe la posibilidad que en varios registros el mismo ganador tenga diferentes fechas de nacimiento por lo cual no mantendría la consistencia de los datos.

4FN Cuarta forma normal: Cumplir 1FN 2FN y 3FN. Los campos multivaluados se identifican por una clave única. Cuando relacionamos dos tablas totalmente independientes cada una de la otra debemos relacionarlas a través de una tabla aparte de las mismas donde solo colocaremos las llaves primarias de cada tabla ya que colocar cualquier otra información relacionada con las tablas implicaría repetir datos, además de hacer la tarea de actualización de registros primarias más compleja, ya que por ejemplo si deseo actualizar el nombre del curso no solo lo tendría que hacer en la tabla cursos sino también en cada tabla donde coloque el nombre lo cual no garantiza la integridad de la información, adiciona información innecesaria en los registros y hace más complejo el trabajo de administrar los datos.
